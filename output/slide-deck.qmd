---
title:       "Version control with git + GitHub for scientific workflows"
date:        2023-06-20
date-format: long
author:      |
  <table>
    <tr>
      <td>Daniel Morillo, Ph.D.</td>
      <td>Emma Pettersson</td>
    </tr>
    <tr>
      <td>
        <center>
          [![](../www/github-logo.png){height="50"}](https://github.com/DaniMori/)&emsp;
          [![](../www/orcid.png){height="50"}](https://orcid.org/0000-0003-3021-3878)
        </center>
      </td>
      <td>
        <center>
          [![](../www/github-logo.png){height="50"}](https://github.com/emmapett/)&emsp;
          [![](../www/orcid.png){height="50"}](https://orcid.org/0000-0002-4776-9162)
        </center>
      </td>
    </tr>
  </table>
# TODO: verify Emma's info & links
institute:   |
  [![](../www/cibersam.png){height="75"}](https://www.cibersam.es/) &emsp;&emsp;
  [![](../www/ki-logo.jpg){height="85"}](https://ki.se/)
format:
  revealjs:
    auto-stretch:            true
    code-annotations:        hover
    fig-cap-location:        bottom
    incremental:             true
    link-external-newwindow: true
    multiplex:               true
    self-contained:          true
    slide-number:            false
    theme:                   ../www/extra-styles.scss
    transition:              none
    view-distance:           3
    template-partials:
      - ../www/title-slide.html
knitr: true
---

## Setup

<br>

::: nonincremental
#### WI-FI:

-   **Name:** Workshop

-   **Password:** insu_med20

<br>

#### FOLLOW LOCALLY:

-   <https://bit.ly/follow-vc>
:::

::: notes
-   Follow presentation, useful for copy-pasting
:::

# git + GitHub: An overview

![](../www/git-github.webp)

::: aside
Taken from [git + GitHub for beginners
I](https://medium.com/cs-note/git-and-github-for-beginners-i-tutorial-263caa01f9c3)
\@ [Medium.com](https://medium.com/)
:::

<!-- Alt image from: https://dev.to/chrisachinga/git-and-github-install-configure-51pa -->

## What is git?

<br>

-   Version control system

<br>

-   "History" of changes

<br>

-   Allows "time-travelling"

<!-- TODO: Include Delorean pic from https://ccn-journal-prod.azurewebsites.net/2021/06/25/back-to-the-future-delorean-says-its-coming-back-and-launches-an-auction/ -->

```{=html}
<!-- ::: aside

*title* by [Attribution](link)

::: -->
```
## What is Github?

<br>

-   Centralized git server

<br>

-   Backup + collaboration

<br>

-   Nice GUI & features on top of VC

## Typical VC setup

![](../www/git-workflow.png){fig-align="center" height="520"}

::: aside
Taken from [Hackolade.com](https://hackolade.com/help/Teamcollaboration.html)
:::

::: notes
-   You have a "local repository"

-   You don't need a "cloud server" to use version control

-   You use a VC server to back-up and collaborate
:::

## git jargon

<br>

-   **Repository ("repo")**: A "project", where all your files live

-   **Remote**: Copy of a repository in Github

-   **Local**: Copy of a repository in your computer

-   **Clone**: To copy a local repository from a remote

# First steps in GitHub

![](../www/github-mascot.png)

::: aside
Taken from [Analyzing GitHub with the search
API](https://www.perl.com/article/112/2014/9/5/Analyzing-GitHub-with-the-search-API/)
\@ [Perl.com](https://www.perl.com/)
:::

## Create a repository (I)

<br>

::: nonincremental
1.  [Sign in](https://github.com/login) to your GitHub account

2.  Go to <https://github.com/emmapett/IM_Template>

3.  Click on "Use this template"

4.  Click on "Create a new repository"
:::

::: notes
Depending on your settings you may be required a 2-factor authentication method

The template will add some useful pre-cooked features to the new repository
:::

## Create a repository (and II)

::: nonincremental
5.  Fill in "Repository name" and "Description" with:

    > **Repository name:** my-first-repo\
    > **Description:** My first repository ever in GitHub

    OR

    use ***a project name and description of your choice***

6.  Choose "Private" visibility

7.  Leave "Include all branches" deselected

8.  Click on "Create repository from template"
:::

::: notes
The name must be something short, and representatitve of the project aim (beware
of whitespaces)

Description must be "short" and direct

-   Public: Anyone can see it, even without signing in to GitHub

-   Private: Only collaborators (we will add them later on)

We only need the current state of the repository (what is in the last "version"
of the main branch)
:::

## Explore your brand new repo {.nonincremental}

::: nonincremental
<br>

-   Check interface elements: tabs, branches, files, "About", "README.md"

<br>

-   Check "Repository structure" section in "README.md"

<br>

-   Discuss folders created automatically
:::

::: notes
Folders try to "mirror" the structure of an R package.

Try to understand what all of them are for.

Consider which ones you may need, and which ones you will want to delete.

Let's not pay much attention to the files, by now (we will see later)

`.gitignore` files in subfolders are intended to "create the folder structure"
(we will see later on what these files are)
:::

## Add collaborators

<br>

::: nonincremental
1.  Click on tab "Settings"

2.  Click on "Collaborators"

3.  Authenticate yourself again (if required)

4.  Click on "Add people"

5.  Search for each other, or [\@DaniMori](https://github.com/DaniMori)
    <!-- TODO: Add Emma's profile too? -->

6.  Click on a collaborator's profile

7.  Click on "Add \<collaborator\> to this repository"

8.  Go to "Notifications" and accept invitation(s)
:::

::: notes
3: You may be required to authenticate again. Use you password or other method,
if it is the case.
:::

# First steps in git

![](../www/git-logo.svg){fig-align="center" height="350"}

<br>

::: aside
*Git Logo* by [Jason Long](https://twitter.com/jasonlong) taken from
[Git](https://git-scm.com/downloads/logos); licensed under [CC BY
3.0](https://creativecommons.org/licenses/by/3.0/)
:::

## Clone repository (I)

<br>

::: nonincremental
1.  **In your GitHub repo** click on the "Code" button

2.  In the "HTTPS" tab, click on the "Copy" button

3.  **In Rstudio** click on "File" -\> "New project..."

4.  Click on "Version Control"

5.  Click on "Git"

6.  In the "New Project Wizard" of Rstudio, paste into "Repository URL:"
:::

::: notes
1: Not the "Code" tab, but the green "Code" button

<br>

6: Note that Rstudio fills in the folder name for you automatically; you don't
need to create a new folder to "nest" your repository into it, it will create it
automatically. If it already exists and is not empty, it will give you an error
and won't create the repository.
:::

## Clone repository (II)

<br>

::: nonincremental
-   Cloud storage folders can produce synchronization conflicts
:::

-   Network units can conflict with the R environment (more about this in a
    while...)

-   **NEVER** clone a repository inside another one

::: fragment
::: callout-tip
Create a local "Workspace" folder in your "Documents" to store all your local
repositories.
:::
:::

::: notes
Avoid using a network a cloud storage folder (e.g. Dropbox, OneDrive)

Network units: May create conflicts with the R environment

Nesting repositories can give problems
:::

## Clone repository (III)

<br>

::: nonincremental
7.  Choose a local folder in "Create project as subdirectory of:"

8.  Click on "Create Project"

9.  Click on "Sign in with your browser" (\*)

10. Close the browser tab / window
:::

::: aside
\*: You will only be asked once
:::

::: notes
9: Signing-in: Necessary because the repository is "private"
:::

## Clone repository (and IV) {.smaller}

<br>

Try the following:

::: nonincremental
-   Clone someone else's repo (\*)

OR

-   Clone <https://github.com/emmapett/VC_Workshop> (\*)
:::

::: fragment
::: callout-important
If you get

``` text
fatal: destination path 'my-first-repo' already exists and is not an empty directory.
```

try a different local folder name
:::
:::

::: aside
\*: Select "Open in new session" this time
:::

::: notes
-   Let Emma show how she organizes her repository and what is its usefulness

-   You are not asked again to authenticate!!

-   The folder names must not "collapse", but the local folder name does not
    need to be the same as the name of the repository. If you are so unlucky as
    to have a repo with the same name as someone else's, try adding e.g. the
    other user's name as suffix.
:::

## Explore your local repo

-   `.git`: Home of your git repository

-   Folders

::: {.fragment .nonincremental}
-   Files:
    -   `.gitignore`

    -   `README.md` and `README.Rmd`

    -   `LICENSE.md`

    -   `.Rprofile`

    -   `renv.lock`
:::

::: notes
Make sure you are in YOUR OWN repository (close the other's repo, or switch
project)

In tab "Files" in Rstudio, or in the Windows explorer

`.git`: Important to not mess with it (in the Windows explorer, note that it is
a hidden folder). If broken, delete and clone again. Manages all the files in
the repository folder and subfolders; this is why we should never create "nested
repositories".
<!-- TODO: "Nested repositories" explanation can go when talking about versioning files and not folders -->

E.g.: Only R code, delete "output", "www/YYYY-mm-dd_Meeting_template.md", etc.

`.gitignore` file will tell "git" that certain files must be "ignored"

`README.md` is the "landing-page documentation" of the project. Consider editing
directly if you want, and deleting `README.Rmd`?

`.Rprofile` only runs a script (we will see later what and why)

`renv.lock` is the "R environment" file
:::

## R environment (I)

<br>

Have you noticed...?

<br>

``` r
# Bootstrapping renv 0.17.3 --------------------------------------------------
* Downloading renv 0.17.3 ... OK (downloaded binary)
* Installing renv 0.17.3 ... Done!
* Successfully installed and loaded renv 0.17.3.
* Project '<path/to/project>' loaded. [renv 0.17.3]
* This project contains a lockfile, but none of the recorded packages are installed.
* Use `renv::restore()` to restore the project library.
```

::: notes
Created by `{renv}`: `.Rprofile` is run everytime and R session starts

(OPEN `.Rprofile`)

The script `renv/activate.R` is sourced, initializing package `{renv}`. This
package creates and manages an R environment locally.
:::

## R environment (II)

`renv.lock` file:

```{embed, file="../renv.lock"}
```

## R environment (and III)

<br>

Update the environment:

::: nonincremental
1.  Go to the "Packages" tab in Rstudio

<br>

2.  Click on "renv" -\> "Restore library..."

<br>

3.  Click on "Restore"
:::

::: notes
Notice that there is a new "drop down" menu, "renv", in the "Packages" tab.

(AFTER 2:)

Take a time to explore the "RestoreLibrary" window. Make sense of the different
columns.

(AFTER 3:)

The environment has been restored (i.e. packages installed). It "links" the
packages in the repository to a local library folder in my computer. This way,
different repositories can share the same package version.

The link to the library folder can be different. That's why it is not advisable
to clone a repo in a network unit shared across different computers.
:::

## Setting up git (\*) {.smaller}

<br>

Before starting...

1.  Go to the "Terminal" tab in Rstudio

::: {.fragment .nonincremental}
2.  Type in:

::: fragment
``` {.bash code-line-numbers="1-2|4-5|7-8"}
# set a user name globally
git config --global user.name "User name"

# set an email address globally
git config --global user.email "GitHubUser@users.noreply.github.com"

# check that everything's ok
git config --list --global
```

::: callout-tip
Paste in terminal with `Shift-Insert`.
:::
:::
:::

::: aside
\*: You will only have to do this once
:::

::: notes
The one and only time that we will open the Terminal. Why doesn't Rstudio
provide GUI functionality for this? I don't know...

Mind the double quotes; type in your name or GitHub user name. This is what will
appear in your repo "history" when you "commit" or create versions

Type in your email (also mind the double quotes). Better use "User name" at
"users.noreply.github.com"
:::

## Let's make some changes

-   Delete unnecessary folders / files

::: {.nonincremental .fragment}
-   Edit `README.md`:

    -   Change \<repository-name\> by your repo (lines 2 & 113)

    -   Change \<repository-url\> by yours (line 66)

    -   Edit "License" section (lines 8-32)

    -   Edit "description" (line 4)
:::

::: notes
IMPORTANT!! Do not delete `.Rprofile`, `renv.lock` or the `renv` folder

Delete: `www`

Note that this results in deleting the file(s) within, not the folder

Other candidates to delete? (Up to each one)

(NEXT)

README file: Information for "visitors" of your repository. Useful if you plan
to make it public at some point. **Give some time to get familiar with it!**

Repo URL must contain the `.git` suffix!!

License:

-   Change "template" by "project" (line 8)

-   Delete bullet points

-   Convert "citation" to "normal text"
:::

# Versioning in git

![](../www/git-lifecycle-states.png){fig-align="center" height="450"}

::: aside
Taken from [Git for Network Engineers Series -- The Basics (Part
I)](https://blogs.cisco.com/learning/git-for-network-engineers-series-the-basics-part-1)
:::

## Viewing changes

<br>

::: nonincremental
-   Click on the "Git" tab in Rstudio

-   What do the different "Status" icons mean?

-   Right click on a "deleted file", then "Revert". What happens?

-   BEWARE of reverting modified files!
:::

::: notes
-   Deleted folders "do not exist". It only considers "deleted files".

-   Deleting an empty folders does not show anything in the Git tab.

-   Deleting a non-empty folder shows one line for each deleted file in the Git
    tab.

-   This is why respositories should NEVER be nested

-   REVERT: Recovers the LAST status of a file from the last point in history.
:::

## Iterating our work

::: nonincremental
1.  Click on the "Commit" button in the "Git" tab of Rstudio

2.  **NEVER** click on discard chunk (unless you are 100% sure)

3.  Select files / chunks / selection

4.  Click on "staged / unstaged" to see the changes "ready to commit"

5.  Write message in "Commit message" text box

6.  Click on "Commit"
:::

::: notes
2: Why "discard chunk" option...? Rstudio should drop this feature

3: Use the `SHIFT` key to select several lines (watch out with "selection", it
does not always work)

4: When seeing the "staged" changes, notice how the "stage chunk" and "discard
chunk" buttons change to "unstage chunk"

5: Git does not allow "empty commmit messages"
:::

## (More) git jargon

<br>

-   **Stage/add**: Mark changes for begin tracked

-   **Commit**: Create a new "point in the history"

-   **Revert**: Revert changes to a file (revert to last commit)

-   **Ammend**: Overwrite last commit (new changes / message)

::: notes
"Ammend" allows you to "correct" and overwrite a (local) commit
:::

# The git workflow

![](../www/git-commands.png){fig-align="center" height="520"}

::: aside
*Envisioning git* by [Doug
Mahugh](https://www.dougmahugh.com/envisioning-github/)
:::

::: notes
Use the "Post office" metaphor to explain:

-   Stage: Pack products (changes) to send

-   Commit: Check packages (changes) in to the postal service

(You can check in several "packages" and the post officer can pick them up
altogether)

-   Push: Send packages to their destination (changes to the repository)

-   Pull: Receive your packages (fetch changes and merge them)
:::

## (Even more) git jargon (\*)

<br>

::: nonincremental
-   **Push**: Send local changes to the remote repository
:::

<br>

-   **Pull**: Get remote changes\
    (to local repository & workspace)

::: aside
\*: Last one, I promise!
:::

## Synchronizing with GitHub {.smaller}

<br>

::: nonincremental
-   Click on "Push"

-   Read response message (from GitHub)

-   Click on "Close"

::: {.fragment fragment-index="1"}
Then try the following:

-   Open someone else's repo (\*)

-   Open `www/.gitignore`

::: incremental
-   Click on "Pull" in the "Git" tab

-   Notice the "warning window"?
:::
:::
:::

::: aside
::: {.fragment fragment-index="1"}
\*: The other one you cloned before
:::
:::

::: notes
-   After committing (once or several times), one must "Push" the changes to the
    repository. Also, at the end of a session is best practice to "Push", so
    that we have a backup of the whole commit history in the cloud (i.e. GitHub)

-   Open someone else's repo by "opening the Rstudio project"

-   Click "Pull" and WATCH OUT for the Warning message: It always appears when a
    file open in the editor "dissapears" from the file system. One must "click
    on No" out of fear for losing something. Better "click on Yes" to have our
    workspace in the same state as the remote.
:::

## DOs and DON'Ts in git (I) {.smaller}

<br>

#### DON'T

-   Be afraid of changes

-   Commit without testing the changes

-   "Bulk-commit" all your progress

-   Ammend an already pushed commit

<br>

::: fragment
#### DO
:::

-   Pull always when beginning to work

-   Commit (+ Push) often

-   Push always when finishing work

-   Write "meaningful commit messages"

## DOs and DON'Ts in git (and II)

::: notes
-   "Bulk-commit": It's better to "be concious" when creating commits; it will
    pay off in the future.

One does not need to "push" every time changes are committed. But it's good
practice to push at least once in a while, when one is sure of the changes, or
at least at the end of the working session
:::

Meaningful commit messages...

![](../www/vc-designers.jpg){fig-align="center" height="450"}

::: aside
*Versioning is important* by
[CommitStrip.com](https://www.commitstrip.com/en/2017/09/12/versioning-is-important/)
:::

::: notes
In the end, the typical commit history looks like this... Even SW engineers make
fun of themselves about it.

But it's better to try, at least...
:::

# Let's practice!

![](../www/workout.jpg){fig-align="center" height="350"}

<br>

::: aside
*Lifting Double Dumbbells free icon*, taken from
[flaticon.com](https://www.flaticon.com/free-icon/lifting-double-dumbbells_82802)
:::

## Versioning new files (I)

<br>

::: nonincremental
-   Download <https://bit.ly/vc-script>

OR

-   copy ***a script of you own***

to the `src` folder of your local repository
:::

-   Install necessary packages and "Snapshot Library..."

-   Stage and commit your changes

::: notes
Snapshot library: The new libraries will be added to the `renv.lock`
:::

## Versioning new files (and II)

<br>

::: nonincremental
-   Download <https://bit.ly/vc-dataset>

OR

-   copy ***a data file of your own***

to the `dat` folder of your local repository
:::

-   Why doesn't it show up in the "Git" tab?

-   How would you add a file in `dat` to your repository?

::: notes
The `dat` folder is ignored (i.e. any file whose path "starts with" that folder)

The line in `.gitignore` can be commented (with a \# in front) or deleted, the
file staged, and then the line uncommented again.

It can also be done in the terminal (but no need to learn the commands)
:::

## File paths (I)

<br>

::: nonincremental
-   Notice the "working directory" on top of the "Console" tab

<br>

::: fragment
-   Change the file path in line <!-- TODO --> of <!-- TODO --> to point to the
    dataset:

``` r
DATA_PATH <- "dat/" #TODO: Complete path
```
:::
:::

## File paths (and II) {.smaller}

<br>

::: callout-tip
Use "relative paths" and "user home" to point to files:

``` r
"./"  # This level
"../" # One level up
"~/"  # User home
```
:::

::: fragment
::: callout-note
You can check "absolute paths" `normalizePath()`:

``` {.r code-line-numbers="1-3|5-6|8-9"}
# Path relative to working directory:
DATA_PATH <- "./dat/data_file.csv"
normalizePath(DATA_PATH, winslash = '/')

# Path in a folder "at the same level as the repo"
normalizePath("../datasets/data_file.csv", winslash = '/')

# Path relative to user home:
normalizePath("~/../local_folder/data_file.csv", winslash = '/')
```
:::
:::

::: notes
Using relative paths:

-   The working directory will always be the base folder for Rstudio projects

-   Make paths "relative" to the working directory
:::

## Making new commits

<br>

-   Make sure your script runs without errors

<br>

-   Commit changes

<br>

-   Maybe push your recent commits?

# Making the most out of git

![](../www/no-merge-conflicts.jpg){fig-align="center" height="350"}

<br>

::: aside
Taken from [makeameme.org](https://makeameme.org/meme/git-merge-no)
:::

## What to version {.smaller}

<br>

#### DO NOT VERSION

1.  Dataset files

2.  Passwords, private keys, and other "secrets"

3.  Binary files

4.  Outcomes & deliverables

<br>

::: fragment
#### VERSION
:::

5.  Your own work

6.  Environment (`{renv}`) files, if necessary

7.  Anything else ***necessary to reproduce*** your outcomes (\*)

::: aside
::: fragment
\*: Except (1), but even exceptions to (3)
:::
:::

::: notes
7.  E.g. the `renv.lock` file, which stores the environment state
:::

## Viewing your history

<br>

-   Click on "History" in the "Git" tab

-   What do the different columns mean?

-   See the detailed changes in a file

-   Click on "View file" in a previous commit

-   Recover file / lines if necessary

::: notes
"View file": We can "manually revert" changes in a commit by restoring a
previous version of the file, or "copying" what we want to recover and pasting
it in the current version in our file system.
:::

## Become a git roadrunner!

<br>

-   Open git window with `CTRL + ALT + M`

-   Stage files with `SPACE` and `UP / DOWN`, or pointer

-   Move focus to "Commit message" with `SHIFT + TAB` and/or `TAB`

-   Commit with `CTRL + ENTER`

-   Type `SHIFT + TAB` then `ENTER` to push

-   Close git window with `ALT + F4` or go to Rstudio main window with
    `ALT + TAB`

# Wrapping up

<br>

-   Set up the git client

-   Create a repository in GitHub

-   Clone a remote repository locally

-   Track changes

-   Explore history

## Future steps

<br>

::: nonincremental
-   [GUI Clients](https://git-scm.com/downloads/guis) (my recommendation,
    [SourceTree](https://www.sourcetreeapp.com/))

-   [Using built-in git operations in
    SAS](https://blogs.sas.com/content/sasdummy/2020/11/10/sas-projects-git/)

-   [git integration in
    Stata](https://medium.com/the-stata-guide/stata-and-github-integration-8c87ddf9784a)

-   [Git
    Branching](https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows)

-   [Pro Git, 2nd edition](https://git-scm.com/book/en/v2), by Scott Chacon and
    Ben Straub
:::

## Useful resources {.smaller}

<br>

::: nonincremental
-   [Daniel](https://github.com/DaniMori)'s [barebones R project
    template](https://github.com/DaniMori/barebones-rproj-template)

-   [I am a Dropbox User and I Don't Get Git](https://garba.org/posts/2021/git/)
    by [Ernesto Gabarino](https://garba.org/about/me/)

-   [Private emails, now more
    private](https://github.blog/2017-04-11-private-emails-now-more-private/),
    article by [Lidsey Bieda](https://github.blog/author/lindseyb/) \@ [GitHub
    Blog](https://github.blog/)

-   Make your GitHub account more secure: [Adding a new SSH key to your GitHub
    account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)

-   [git Commands](https://cloudstudio.com.au/2021/06/26/git-command/) by
    [Richard Zhao](https://cloudstudio.com.au/about/)

-   [Git cheat sheet](https://jdsalaro.com/blog/git-cheat-sheet.html) by [Jayson
    Salazar](https://jdsalaro.com/about.html)

-   [How do git branches
    work?](https://www.howtogeek.com/devops/how-do-git-branches-work/) by
    [Anthony Heddings](https://www.howtogeek.com/author/anthonyheddings/) \@
    [How-To Geek](https://www.howtogeek.com/)

-   ["Become a git master"
    module](https://courses.csail.mit.edu/6.S194/13/lessons/03-git/index.html)
    from the [Open Source Software Project Lab
    course](https://courses.csail.mit.edu/6.S194/13/) \@ [MIT's Computer Science
    & Artificial Intelligence Laboratory](https://www.csail.mit.edu/)
:::

## The End {.center}

<br>

::: {#title-slide .center}
### Many thanks!

<br> <br>

### Tack så mycket!

<br> <br>

### ¡Muchas gracias!
:::

